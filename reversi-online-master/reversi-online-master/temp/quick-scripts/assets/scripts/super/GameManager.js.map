{"version":3,"sources":["GameManager.js"],"names":["Constants","require","GAME_STATE","STAND","CHESS_TYPE","cc","Class","extends","Component","properties","gameState","default","PREPARE","type","turn","BLACK","blackScoreLabel","Label","whiteScoreLabel","infoPanel","Node","infoLabel","onLoad","G","gameManager","infoAnimation","getComponent","Animation","startGame","PLAYING","showInfo","endGame","onFinished","roomSocket","disconnect","director","loadScene","on","OVER","changeTurn","WHITE","forceChangeTurn","updateScore","chessCount","chessManager","getChessCount","blackChess","whiteChess","string","stand","play"],"mappings":";;;;;;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,aAAaF,UAAUE,UAA7B;AACA,IAAMC,QAAQH,UAAUG,KAAxB;AACA,IAAMC,aAAaJ,UAAUI,UAA7B;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,mBAAW;AACPC,qBAAST,WAAWU,OADb;AAEPC,kBAAMX;AAFC,SADH;AAKRY,cAAM;AACFH,qBAASR,MAAMY,KADb;AAEFF,kBAAMV;AAFJ,SALE;AASRa,yBAAiBX,GAAGY,KATZ;AAURC,yBAAiBb,GAAGY,KAVZ;AAWRE,mBAAWd,GAAGe,IAXN;AAYRC,mBAAWhB,GAAGY;AAZN,KAHP;;AAkBL;AACAK,YAAQ,kBAAY;AAChBC,UAAEC,WAAF,GAAgB,IAAhB;AACA,aAAKC,aAAL,GAAqB,KAAKN,SAAL,CAAeO,YAAf,CAA4BrB,GAAGsB,SAA/B,CAArB;AACH,KAtBI;;AAwBLC,aAxBK,uBAwBO;AACR,aAAKd,IAAL,GAAYX,MAAMY,KAAlB;AACA,aAAKL,SAAL,GAAiBR,WAAW2B,OAA5B;AACA,aAAKC,QAAL,CAAc,YAAd;AACH,KA5BI;AA8BLC,WA9BK,qBA8BK;AACN,YAAIC,aAAa,SAAbA,UAAa,GAAK;AAClBT,cAAEU,UAAF,CAAaC,UAAb;AACA7B,eAAG8B,QAAH,CAAYC,SAAZ,CAAsB,MAAtB;AACH,SAHD;AAIA,aAAKX,aAAL,CAAmBY,EAAnB,CAAsB,UAAtB,EAAiCL,UAAjC,EAA4C,IAA5C;AACA,aAAKtB,SAAL,GAAiBR,WAAWoC,IAA5B;AACA,aAAKR,QAAL,CAAc,WAAd;AACH,KAtCI;AAwCLS,cAxCK,wBAwCQ;AACT,YAAI,KAAKzB,IAAL,KAAcX,MAAMY,KAAxB,EAA+B;AAC3B,iBAAKD,IAAL,GAAYX,MAAMqC,KAAlB;AACH,SAFD,MAEO,IAAI,KAAK1B,IAAL,KAAcX,MAAMqC,KAAxB,EAA+B;AAClC,iBAAK1B,IAAL,GAAYX,MAAMY,KAAlB;AACH;AACJ,KA9CI;AAgDL0B,mBAhDK,6BAgDa;AAAC;AACf,aAAKX,QAAL,CAAc,mBAAd;AACA,aAAKS,UAAL;AACH,KAnDI;AAqDLG,eArDK,yBAqDS;AACV,YAAIC,aAAapB,EAAEqB,YAAF,CAAeC,aAAf,EAAjB;AACA,YAAIC,aAAaH,WAAW,CAAX,CAAjB;AACA,YAAII,aAAaJ,WAAW,CAAX,CAAjB;AACA,aAAK3B,eAAL,CAAqBgC,MAArB,GAA8BF,aAAa,EAA3C;AACA,aAAK5B,eAAL,CAAqB8B,MAArB,GAA8BD,aAAa,EAA3C;AACH,KA3DI;AA6DLjB,YA7DK,oBA6DIjB,IA7DJ,EA6DU;AACX,YAAI8B,aAAapB,EAAEqB,YAAF,CAAeC,aAAf,EAAjB;AACA,YAAIC,aAAaH,WAAW,CAAX,CAAjB;AACA,YAAII,aAAaJ,WAAW,CAAX,CAAjB;AACA,YAAI9B,SAAS,YAAb,EAA2B;AACvB,gBAAIU,EAAE0B,KAAF,KAAY9C,MAAMY,KAAtB,EAA6B;AACzB,qBAAKM,SAAL,CAAe2B,MAAf,GAAwB,cAAxB;AACH,aAFD,MAEO,IAAIzB,EAAE0B,KAAF,KAAY9C,MAAMqC,KAAtB,EAA6B;AAChC,qBAAKnB,SAAL,CAAe2B,MAAf,GAAwB,cAAxB;AACH;AACJ,SAND,MAMO,IAAInC,SAAS,WAAb,EAA0B;AAC7B,gBAAIiC,aAAaC,UAAjB,EAA6B;AACzB,qBAAK1B,SAAL,CAAe2B,MAAf,GAAwB,WAAxB;AACH,aAFD,MAEO,IAAIF,aAAaC,UAAjB,EAA6B;AAChC,qBAAK1B,SAAL,CAAe2B,MAAf,GAAwB,WAAxB;AACH,aAFM,MAEA,IAAIF,eAAeC,UAAnB,EAA+B;AAClC,qBAAK1B,SAAL,CAAe2B,MAAf,GAAwB,UAAxB;AACH;AACJ,SARM,MAQA,IAAInC,SAAS,mBAAb,EAAkC;AACrC,gBAAIU,EAAE0B,KAAF,KAAY9C,MAAMY,KAAtB,EAA6B;AACzB,qBAAKM,SAAL,CAAe2B,MAAf,GAAwB,eAAxB;AACH,aAFD,MAEO,IAAIzB,EAAE0B,KAAF,KAAY9C,MAAMqC,KAAtB,EAA6B;AAChC,qBAAKnB,SAAL,CAAe2B,MAAf,GAAwB,eAAxB;AACH;AACJ;AACD,aAAKvB,aAAL,CAAmByB,IAAnB;AACH;AAvFI,CAAT","file":"GameManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\super","sourcesContent":["const Constants = require('Constants');\nconst GAME_STATE = Constants.GAME_STATE;\nconst STAND = Constants.STAND;\nconst CHESS_TYPE = Constants.CHESS_TYPE;\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        gameState: {\n            default: GAME_STATE.PREPARE,\n            type: GAME_STATE\n        },\n        turn: {\n            default: STAND.BLACK,\n            type: STAND\n        },\n        blackScoreLabel: cc.Label,\n        whiteScoreLabel: cc.Label,\n        infoPanel: cc.Node,\n        infoLabel: cc.Label\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        G.gameManager = this;\n        this.infoAnimation = this.infoPanel.getComponent(cc.Animation);\n    },\n\n    startGame() {\n        this.turn = STAND.BLACK;\n        this.gameState = GAME_STATE.PLAYING;\n        this.showInfo('start game');\n    },\n\n    endGame() {\n        let onFinished = () =>{\n            G.roomSocket.disconnect();\n            cc.director.loadScene('menu');\n        }\n        this.infoAnimation.on('finished',onFinished,this);\n        this.gameState = GAME_STATE.OVER;\n        this.showInfo('game over');\n    },\n\n    changeTurn() {\n        if (this.turn === STAND.BLACK) {\n            this.turn = STAND.WHITE;\n        } else if (this.turn === STAND.WHITE) {\n            this.turn = STAND.BLACK;\n        }\n    },\n\n    forceChangeTurn() {//无子可下换边\n        this.showInfo('force change turn');\n        this.changeTurn();\n    },\n\n    updateScore() {\n        let chessCount = G.chessManager.getChessCount();\n        let blackChess = chessCount[0];\n        let whiteChess = chessCount[1];\n        this.blackScoreLabel.string = blackChess + '';\n        this.whiteScoreLabel.string = whiteChess + '';\n    },\n\n    showInfo(type) {\n        let chessCount = G.chessManager.getChessCount();\n        let blackChess = chessCount[0];\n        let whiteChess = chessCount[1];\n        if (type === 'start game') {\n            if (G.stand === STAND.BLACK) {\n                this.infoLabel.string = '你是蓝色方\\n执黑棋先手';\n            } else if (G.stand === STAND.WHITE) {\n                this.infoLabel.string = '你是红色方\\n执白棋后手';\n            }\n        } else if (type === 'game over') {\n            if (blackChess > whiteChess) {\n                this.infoLabel.string = '游戏结束\\n黑棋胜';\n            } else if (blackChess < whiteChess) {\n                this.infoLabel.string = '游戏结束\\n白棋胜';\n            } else if (blackChess === whiteChess) {\n                this.infoLabel.string = '游戏结束\\n平局';\n            }\n        } else if (type === 'force change turn') {\n            if (G.stand === STAND.BLACK) {\n                this.infoLabel.string = '黑方无子可下\\n请白方下子';\n            } else if (G.stand === STAND.WHITE) {\n                this.infoLabel.string = '白方无子可下\\n请黑方下子';\n            }\n        }\n        this.infoAnimation.play();\n    }\n\n});\n"]}