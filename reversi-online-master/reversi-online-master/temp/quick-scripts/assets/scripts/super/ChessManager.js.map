{"version":3,"sources":["ChessManager.js"],"names":["Constants","require","CHESS_TYPE","STAND","GAME_STATE","cc","Class","extends","Component","properties","COL","ROW","chessPrefab","Prefab","chesses","onLoad","G","chessManager","chessWidth","node","width","x","y","chessNode","instantiate","parent","height","position","p","chess","getComponent","coor","addTouchEvent","type","BLACK","WHITE","gameManager","startGame","self","roomSocket","on","chessCoor","fallChess","changeTurn","forceChangeTurn","e","gameState","PLAYING","turn","stand","NONE","dir","judgePass","emit","changePass","updateScore","judgeWin","nearChess","tempChess","judgeMoveAble","tryChess","selfMoveAble","oppoMoveAble","trun","log","endGame","getChessCount","blackChess","whiteChess","length"],"mappings":"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","file":"ChessManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\super","sourcesContent":["const Constants = require('Constants');\nconst CHESS_TYPE = Constants.CHESS_TYPE;\nconst STAND = Constants.STAND;\nconst GAME_STATE = Constants.GAME_STATE;\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        COL: 8,\n        ROW: 8,\n        chessPrefab: cc.Prefab,\n        chesses: []\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        G.chessManager = this;\n        this.chessWidth = this.node.width / this.COL;\n        for (let x = 0; x < this.COL; x++) {\n            this.chesses[x] = [];\n            for (let y = 0; y < this.ROW; y++) {\n                let chessNode = cc.instantiate(this.chessPrefab);\n                chessNode.parent = this.node;\n                chessNode.width = this.chessWidth - 5;\n                chessNode.height = this.chessWidth - 5;\n                chessNode.position = cc.p(this.chessWidth / 2 + x * this.chessWidth, this.chessWidth / 2 + y * this.chessWidth);\n                let chess = chessNode.getComponent('Chess');\n                chess.coor = cc.p(x, y);\n                this.chesses[x][y] = chess;\n                this.addTouchEvent(chess);\n            }\n        }\n        this.chesses[3][3].type = CHESS_TYPE.BLACK;\n        this.chesses[3][4].type = CHESS_TYPE.WHITE;\n        this.chesses[4][4].type = CHESS_TYPE.BLACK;\n        this.chesses[4][3].type = CHESS_TYPE.WHITE;\n        G.gameManager.startGame();\n        let self = this;\n        G.roomSocket.on('update chessboard', function (chessCoor) {\n            self.fallChess(self.chesses[chessCoor.x][chessCoor.y]);\n        });\n        G.roomSocket.on('change turn', function () {\n            G.gameManager.changeTurn();\n        });\n        G.roomSocket.on('force change turn', function () {\n            G.gameManager.forceChangeTurn();\n        });\n    },\n\n    addTouchEvent(chess) {\n        let self = this;\n        chess.node.on('touchend', function (e) {\n            if (G.gameManager.gameState === GAME_STATE.PLAYING && G.gameManager.turn === G.stand) {\n                if (chess.type === CHESS_TYPE.NONE) {\n                    for (let dir = 1; dir <= 8; dir++) {\n                        if (self.judgePass(G.gameManager.turn, chess, dir)) {\n                            self.fallChess(chess);\n                            G.roomSocket.emit('update chessboard', chess.coor);\n                            break;\n                        }\n                        if (dir === 8) {\n                            return;\n                        }\n                    }\n\n                }\n            }\n        });\n    },\n\n    fallChess(chess) {\n        if (G.gameManager.turn === STAND.BLACK) {\n            chess.type = CHESS_TYPE.BLACK;\n        } else if (G.gameManager.turn === STAND.WHITE) {\n            chess.type = CHESS_TYPE.WHITE;\n        }\n        for (let dir = 1; dir <= 8; dir++) {\n            if (this.judgePass(G.gameManager.turn, chess, dir)) {\n                this.changePass(chess, dir);\n            }\n        }\n        G.gameManager.updateScore();\n        G.gameManager.changeTurn();\n        this.judgeWin();\n    },\n\n    nearChess(chess, dir) {\n        switch (dir) {\n            case 1://left\n                if (chess.coor.x !== 0) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y];\n                }\n                break;\n            case 2://left up\n                if (chess.coor.x !== 0 && chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y + 1];\n                }\n                break;\n            case 3://up\n                if (chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x][chess.coor.y + 1];\n                }\n                break;\n            case 4://right up\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y + 1];\n                }\n                break;\n            case 5://right\n                if (chess.coor.x !== this.COL - 1) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y];\n                }\n                break;\n            case 6://right down\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y - 1];\n                }\n                break;\n            case 7://down\n                if (chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x][chess.coor.y - 1];\n                }\n                break;\n            case 8://left down\n                if (chess.coor.x !== 0 && chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y - 1];\n                }\n                break;\n\n            default:\n                break;\n        }\n        return null;\n    },\n\n    judgePass(stand, chess, dir) {\n        let tempChess = chess;\n        tempChess = this.nearChess(chess, dir);\n        if (tempChess === null) {\n            return false;\n        }\n        while (tempChess.type === -stand) {\n            tempChess = this.nearChess(tempChess, dir);\n            if (tempChess === null) {\n                return false;\n            }\n            if (tempChess.type == stand) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    changePass(chess, dir) {\n        let tempChess = this.nearChess(chess, dir);\n        while (tempChess.type === -G.gameManager.turn) {\n            tempChess.type = chess.type;\n            tempChess = this.nearChess(tempChess, dir);\n        }\n    },\n\n    judgeMoveAble(stand) {//判断stand是否有可落子的地方\n        let tryChess = null;\n        for (let x = 0; x < this.COL; x++) {\n            for (let y = 0; y < this.ROW; y++) {\n                tryChess = this.chesses[x][y];\n                if (tryChess.type === CHESS_TYPE.NONE) {\n                    for (let dir = 1; dir <= 8; dir++) {\n                        if (this.judgePass(stand, tryChess, dir)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    },\n\n    judgeWin() {\n        let selfMoveAble = this.judgeMoveAble(G.gameManager.turn);\n        let oppoMoveAble = this.judgeMoveAble(-G.gameManager.trun);\n        if (selfMoveAble) {\n            return;\n        } else if (!selfMoveAble && oppoMoveAble) {\n            cc.log('can not move next turn');\n            G.gameManager.forceChangeTurn();\n            G.roomSocket.emit('force change turn');\n        } else if (!selfMoveAble && !oppoMoveAble) {\n            cc.log('both can not move someone win');\n            G.gameManager.endGame();\n        }\n    },\n\n    getChessCount(){\n        let blackChess = 0;\n        let whiteChess = 0;\n        for (let x = 0; x < this.chesses.length; x++) {\n            for (let y = 0; y < this.chesses[x].length; y++) {\n                if (this.chesses[x][y].type === CHESS_TYPE.BLACK) {\n                    blackChess++;\n                } else if (this.chesses[x][y].type === CHESS_TYPE.WHITE) {\n                    whiteChess++;\n                }\n            }\n        }\n        return [blackChess,whiteChess];\n    }\n});\n"]}